// This alternate version of the code does not require
// atomic.h. Instead, interrupts() and noInterrupts() 
// are used. Please use this code if your 
// platform does not support ATOMIC_BLOCK.

// A class to compute the control signal
class SimplePID{
  private:
    float kp, kd, ki, umax; // Parameters
    float eprev, eintegral; // Storage

  public:
  // Constructor
  SimplePID() : kp(1), kd(0), ki(0.2), umax(255), eprev(0.0), eintegral(0.0){}

  // A function to set the parameters
  void setParams(float kpIn, float kdIn, float kiIn, float umaxIn){
    kp = kpIn; kd = kdIn; ki = kiIn; umax = umaxIn;
  }

  // A function to compute the control signal
  void evalu(int value, int target, float deltaT, int &pwr, int &dir){
    // error
    int e = target - value;
  
    // derivative
    float dedt = (e-eprev)/(deltaT);
  
    // integral
    eintegral = eintegral + e*deltaT;
  
    // control signal
    float u = kp*e + kd*dedt + ki*eintegral;
  
    // motor power
    pwr = (int) fabs(u);
    if( pwr > umax ){
      pwr = umax;
    }
  
    // motor direction
    dir = 1;
    if(u<0){
      dir = -1;
    }
  
    // store previous error
    eprev = e;
  }
  
};

// How many motors
#define NMOTORS 4

// Pins
const int enca[] = {33,35,27,16};
const int encb[] = {32,34,14,17};

const int in1[] = {12,4,18,26};
const int in2[] = {13,2,19,25};

//pwmchannel
 int channel[] = {0,2,4,6};
 //int fwd[] = {0,2};
// int bak[] = {1,3};    

// pwm vars 
const int freq  = 30000;
const int resolution = 8;

// Globals
long prevT = 0;
volatile int posi[] = {0,0,0};
//
//frontleft 
const int pwmchannel0 = 0; 
const int pwmchannel1 = 1; 
//frontright
const int pwmchannel2 = 2;
const int pwmchannel3 = 3;
//
//backleft
const int pwmchannel4 = 4;
const int pwmchannel5 = 5;
//backright
const int pwmchannel6 = 6;
const int pwmchannel7 = 7;
// PID class instances
SimplePID pid[NMOTORS];

void setup() {
  Serial.begin(9600);

//
  for(int k = 0; k < NMOTORS; k++){
    pinMode(enca[k],INPUT);
    pinMode(encb[k],INPUT);
//    pinMode(pwm[k],OUTPUT);// channel 1 -8 for pwm need pwm direction 1 and direction 2 

    pinMode(in1[k],OUTPUT);
    pinMode(in2[k],OUTPUT);
    channel[k];
  
//front left
    ledcSetup(pwmchannel0, freq, resolution); // set up pwm properties change to 4 later
    ledcSetup(pwmchannel1, freq, resolution); // set up pwm properties change to 4 later

    ledcAttachPin(13, pwmchannel0);  // set to 4 later  attach channel to pin
    ledcAttachPin(12, pwmchannel1);  // set to 4 later  attach channel to pin

//front right
    ledcSetup(pwmchannel2, freq, resolution); // set up pwm properties change to 4 later
    ledcSetup(pwmchannel3, freq, resolution); // set up pwm properties change to 4 later

    ledcAttachPin(2, pwmchannel2);  // set to 4 later  attach channel to pin
    ledcAttachPin(4, pwmchannel3);  // set to 4 later  attach channel to pin
//backleft 
    ledcSetup(pwmchannel4, freq, resolution); // 
    ledcSetup(pwmchannel5, freq, resolution); // set up pwm properties change to 4 later

    ledcAttachPin(19, pwmchannel4);  // 
    ledcAttachPin(18, pwmchannel5);  // 
//backright
  ledcSetup(pwmchannel6, freq, resolution); // set up pwm properties change to 4 later
  ledcSetup(pwmchannel7, freq, resolution); // set up pwm properties change to 4 later

  ledcAttachPin(25, pwmchannel6);  // set to 4 later  attach channel to pin
  ledcAttachPin(26, pwmchannel7);  // set to 4 later  attach channel to pin

    pid[k].setParams(1,0,0.025,255);
  }
  
  attachInterrupt(digitalPinToInterrupt(enca[0]),readEncoder<0>,RISING);
  attachInterrupt(digitalPinToInterrupt(enca[1]),readEncoder<1>,RISING);
  attachInterrupt(digitalPinToInterrupt(enca[2]),readEncoder<2>,RISING);
  attachInterrupt(digitalPinToInterrupt(enca[3]),readEncoder<2>,RISING);

 // Serial.println("target pos");
}

void loop() {

  // set target position
  int target[NMOTORS];
  target[0] =  1200;//80;//-250*sin(prevT/1e6); //j9 
//  delay(200);
  target[1] =  1200;//8000;//-250*sin(prevT/1e6); //j8 
  //delay(200)
  ;
  target[2] =  1200;//8000;//250*sin(prevT/1e6) ; //j10  goes fwd bak

  target[3] =  1200;//8000;//250*sin(prevT/1e6) ; //j7  goes fwd bak

  // time difference
  long currT = micros();
  float deltaT = ((float) (currT - prevT))/( 1.0e6 );
  prevT = currT;
  // Read the position
  int pos[NMOTORS];
 // disable interrupts temporarily while reading
 noInterrupts(); 

  for(int k = 0; k < NMOTORS; k++){
      pos[k] = posi[k];
    }
  interrupts(); // turn interrupts back on
  
  // loop through the motors
  for(int k = 0; k < NMOTORS; k++){
    int pwr, dir;
    // evaluate the control signal
    pid[k].evalu(pos[k],target[k],deltaT,pwr,dir);
    // signal the motor
    setMotor(dir,pwr,channel[k],in1[k],in2[k]);  // needs and extra channel for switching direction 
  }

  for(int k = 0; k < NMOTORS; k++){
    Serial.print(target[2]);
    Serial.print("target ");
    Serial.print(pos[2]);
    Serial.print("target ");
  }

}

void setMotor(int dir, int pwmVal, int chan ,int in1, int in2){
  
 // analogWrite(pwm,pwmVal);
  if(dir == 1){
    ledcWrite(chan,pwmVal);
    digitalWrite(in1,LOW);
  }
  else if(dir == -1){
     ledcWrite(chan + 1 ,pwmVal);
    digitalWrite(in2,LOW);
  }
  else{
    digitalWrite(in1,LOW);
    digitalWrite(in2,LOW);
  }  
}
 
 /*
        //ccw pwm -b  write - a low
 if (chan == 1){
     //ccw pwm -b  write - a low
    if (dir == 1){
        ledcWrite(0, pwmVal);
        digitalWrite(in1, LOW);
        delay(200);
    }
 
   // cw pwm -a  write - b low
     
    else if (dir == -1){
        ledcWrite(1, pwmVal);
        digitalWrite(in2, LOW);
        delay(200);
     }
 }

 else if (chan = 2 ){
    if (dir  == 1){
        ledcWrite(2, pwmVal);
        digitalWrite(in1, LOW);
        delay(200);
    }
 
   // cw pwm -a  write - b low
     
     else if (dir == -1){
        ledcWrite(3, pwmVal);
        digitalWrite(in2, LOW);
        delay(200);
     }
   }
 else if (chan == 3 ){
    if (dir  == 1){
        ledcWrite(4, pwmVal);
        digitalWrite(in1, LOW);
        delay(200);
    }
 
   // cw pwm -a  write - b low
     
     else if (dir == -1){
        ledcWrite(5, pwmVal);
        digitalWrite(in2, LOW);
        delay(200);
     }
   }

  else{
        digitalWrite(in1, LOW);
        digitalWrite(in2, LOW);

    }
}
*/
 




template <int j>
void readEncoder(){
  int b = digitalRead(encb[j]);
  if(b > 0){
    posi[j]++;
  }
  else{
    posi[j]--;
  }
}
